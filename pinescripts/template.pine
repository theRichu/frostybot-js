//@version=5
strategy("RichuV3 TEST", overlay=true, calc_on_every_tick=true)

additional_cmd        = ",\"botType\":\"ANN\",\"basecurrency\":\"" + syminfo.basecurrency + "\"" + ",\"currency\":\"" + syminfo.currency + "\""

LuseSL = input(true,  title="Use Stop Loss", group="LONG 🠕 PROFIT & LOSS")
LSLperc = input.float(title="Stop Loss (%)", defval=1.5, minval=0, maxval=50, step=.1, group="LONG 🠕 PROFIT & LOSS") / 100
SuseSL = input(true,  title="Use Stop Loss", group="SHORT 🠗 PROFIT & LOSS")
SSLperc = input.float(title="Stop Loss (%)", defval=1.4, minval=0, maxval=50, step=.1, group="SHORT 🠗 PROFIT & LOSS") / 100

// TIME WINDOW ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
startYear = input.int(title="Start Year", defval=2021, minval=1800, maxval=2100, group="Date Limits")
startMonth = input.int(title="Start Month",defval=1, minval=1, maxval=12, group="Date Limits")
startDate = input.int(title="Start Date", defval=1, minval=1, maxval=31, group="Date Limits")
startHour = input.int(title="Start Hour", defval=0, minval=0, maxval=23, group="Date Limits")
startMinute = input.int(title="Start Minute", defval=0, minval=0, maxval=59, group="Date Limits")

endYear = input.int(title="End Year", defval=2025, minval=1800, maxval=2100, group="Date Limits")
endMonth = input.int(title="End Month", defval=7, minval=1, maxval=12, group="Date Limits")
endDate = input.int(title="End Date", defval=1, minval=1, maxval=31, group="Date Limits")

// Look if the close time of the current bar
// falls inside the date range

start = timestamp('Asia/Seoul', startYear, startMonth, startDate, startHour, startMinute)
end = timestamp('Asia/Seoul', endYear, endMonth, endDate, 0, 0)
inDateRange = (time >= start) and (time < end)
isInRange() => (time >= start) and (time < end)

bgcolor(isInRange() ? color.new(color.yellow, 95) : na)


TradeDir=strategy.position_size>0?"LONG":strategy.position_size<0?"SHORT":na

// KNN Strategy▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼

period=input.int(title="Period", defval=10)
len=input.int(title="Period", defval=10)

smaHigh=ta.sma(high, len)
smaLow=ta.sma(low, len)
Hlv = 0
Hlv := close > smaHigh ? 1 : close < smaLow ? -1 : Hlv[1]
sslDown = Hlv < 0 ? smaHigh: smaLow
sslUp   = Hlv < 0 ? smaLow : smaHigh

plot(sslDown, linewidth=2, color=color.new(color.red, 80))
plot(sslUp, linewidth=2, color=color.new(color.lime,80))

longCondition = ta.crossover(sslUp, sslDown)
shortCondition = ta.crossunder(sslUp, sslDown)


strategy.entry("Long", strategy.long, when=longCondition and isInRange(), alert_message=additional_cmd) //(LuseSL ? ",\"stoploss\":\"-" + str.tostring(LSLperc*100) + "%\"" : "")
strategy.entry("Short", strategy.short, when=shortCondition and isInRange(), alert_message=additional_cmd) // (SuseSL ? ",\"stoploss\":\"" + str.tostring(SSLperc*100) + "%\"" : "")


neutral = false
neutral := not (longCondition or shortCondition)

bgcolor(color.new(neutral?color.gray:(longCondition ? color.green : color.red ), 80))

// 0:no, 1:long, -1:short
status = 0
// 자신감, stoploss 를 만나게 되면 떨어진다. 
confidence = not neutral
// if(longChance or shortChance)
//     confidence := true

// neutral 일때 자신감이 없다면 포지션을 갖지 않는다. (있다면 이전 포지션 유지)
status := neutral ? (confidence ? status[1] : 0) : (longCondition ? 1 : -1)



actionColor = status==0 ? color.gray : (status==-1 ? color.red : color.blue)


// STOP LOSS▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼

//LONG STOP LOSS
LslconvertL = strategy.position_avg_price * (1 - LSLperc)
LSL = TradeDir == "LONG" and (math.min(open,close,low) < LslconvertL) and LuseSL 
//SHORT STOP LOSS
SslconvertS = strategy.position_avg_price * (1 + SSLperc)
SSL = TradeDir == "SHORT" and (math.max(open,close,high) > SslconvertS) and SuseSL 

stopLossLimit = TradeDir == "LONG"?LslconvertL:TradeDir=="SHORT"?SslconvertS:na
plot(stopLossLimit, color=color.new(TradeDir == "LONG"?color.blue:color.red,30), title="stopLossLimit", style=plot.style_stepline)

if(LSL or SSL)
    confidence := false


// var nowDangerBox = box.new(na, na, na, na, border_color=na, xloc=xloc.bar_index)
// moveDangerBox(_box) => 
//     box.set_right(_box, bar_index)
//     box.set_left(_box, strategy.opentrades.entry_bar_index(0))
//     box.set_top(_box, math.max( strategy.position_avg_price, stopLossLimit))
//     box.set_bottom(_box, math.min( strategy.position_avg_price, stopLossLimit))
//     box.set_extend(_box, extend=extend.right)
//     box.set_bgcolor(_box, color.new(color.red,90))

// moveDangerBox(nowDangerBox)

// TODO: 포지션을 가지지 않는 상태.. 확신이 없거나.. 스톱로스 연속 2회 했다면..?

// strategy.close("Long", comment="LSL",  when=LSL, alert_message=additional_cmd)
// strategy.close("Short", comment="SSL", when=SSL, alert_message=additional_cmd)



// STRATEGY TRADES▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
// longCondition = status == 1 and inDateRange
// shortCondition = status == -1 and inDateRange

// strategy.entry("Long", strategy.long, when=longCondition, alert_message=additional_cmd, stop=LslconvertL) //(LuseSL ? ",\"stoploss\":\"-" + str.tostring(LSLperc*100) + "%\"" : "")
// strategy.entry("Short", strategy.short, when=shortCondition, alert_message=additional_cmd, stop=SslconvertS) // (SuseSL ? ",\"stoploss\":\"" + str.tostring(SSLperc*100) + "%\"" : "")
