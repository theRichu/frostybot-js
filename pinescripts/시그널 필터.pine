// 시그널 필터 ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
// TIME WINDOW
startYear = input.int(title="Start Year", defval=2022, minval=1800, maxval=2100, group="Date Limits")
startMonth = input.int(title="Start Month",defval=3, minval=1, maxval=12, group="Date Limits")
startDate = input.int(title="Start Date", defval=1, minval=1, maxval=31, group="Date Limits")
startHour = input.int(title="Start Hour", defval=0, minval=0, maxval=23, group="Date Limits")
startMinute = input.int(title="Start Minute", defval=0, minval=0, maxval=59, group="Date Limits")

endYear = input.int(title="End Year", defval=2025, minval=1800, maxval=2100, group="Date Limits")
endMonth = input.int(title="End Month", defval=7, minval=1, maxval=12, group="Date Limits")
endDate = input.int(title="End Date", defval=1, minval=1, maxval=31, group="Date Limits")

// Look if the close time of the current bar
// falls inside the date range
inDateRange = (time >= timestamp('Asia/Seoul', startYear, startMonth, startDate, startHour, startMinute)) and (time < timestamp('Asia/Seoul', endYear, endMonth, endDate, 0, 0))

// 변동성 필터
useVolatilityFilter = input.bool(true,"Use Volatility Filter", group="Signal Filter Volatility")
trueRangeLength = input.int(14,"TrueRangeLength", group="Signal Filter Volatility")

volatilityBreak(volmin, volmax) =>
    ta.atr(volmin) > ta.atr(volmax)

volatilityFilterSignal = useVolatilityFilter?volatilityBreak(1, trueRangeLength):true

// 볼륨 필터
useVolumeFilter = input.bool(true,"Use Volume Filter", group="Signal Filter Volume")

volumeRSILength = input.int(14,"VolumeRSILength", group="Signal Filter Volume")
volumeRSIHMALength = input.int(10,"volumeRSIHMALength", group="Signal Filter Volume")
volumeThreshold = input.int(52,"VolumeFilterThreshold", group="Signal Filter Volume")

volumeBreak(thres) =>
    rsivol = ta.rsi(volume, volumeRSILength)
    osc = ta.hma(rsivol, volumeRSIHMALength)
    osc > thres

volumeFilterSignal = useVolumeFilter?volumeBreak(volumeThreshold):true
