// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© capissimo
//@version=4

strategy("Machine Learning: kNN-based Strategy (s2)", overlay=true, precision=4, max_labels_count=200)

// kNN-based Strategy (FX and Crypto)
// Description: 
// This strategy uses a classic machine learning algorithm - k Nearest Neighbours (kNN) - 
// to let you find a prediction for the next (tomorrow's, next month's, etc.) market move. 
// Being an unsupervised machine learning algorithm, kNN is one of the most simple learning algorithms. 

// To do a prediction of the next market move, the kNN algorithm uses the historic data, 
// collected in 3 arrays - feature1, feature2 and directions, - and finds the k-nearest 
// neighbours of the current indicator(s) values. 

// The two dimensional kNN algorithm just has a look on what has happened in the past when 
// the two indicators had a similar level. It then looks at the k nearest neighbours, 
// sees their state and thus classifies the current point.

// The kNN algorithm offers a framework to test all kinds of indicators easily to see if they 
// have got any *predictive value*. One can easily add cog, wpr and others.
// Note: TradingViews's playback feature helps to see this strategy in action.
// Warning: Signals ARE repainting.

// Style tags: Trend Following, Trend Analysis
// Asset class: Equities, Futures, ETFs, Currencies and Commodities
// Dataset: FX Minutes/Hours+++/Days

//-------------------- Inputs

ind         = input('All','Indicator',   options=['RSI','ROC','CCI','All'])
fast        = input(14,   'Fast Period', minval=1)
slow        = input(28,   'Slow Period', minval=2)
fltr        = input(false,'To Filter Out Signals By Volatility?')

startYear   = input(2000, 'Training Start Year',  minval=2000)
startMonth  = input(1,    'Training Start Month', minval=1, maxval=12)
startDay    = input(1,    'Training Start Day',   minval=1, maxval=31)
stopYear    = input(2021, 'Training Stop Year',   minval=2000)
stopMonth   = input(12,   'Training Stop Month',  minval=1, maxval=12)
stopDay     = input(31,   'Training Stop Day',    minval=1, maxval=31)

//-------------------- Global Variables

var BUY = 1, var SELL = -1, var HOLD = 0

var k   = floor(sqrt(252))  // k Value for kNN

//-------------------- Custom Functions

cAqua(g) => g>9?#0080FFff:g>8?#0080FFe5:g>7?#0080FFcc:g>6?#0080FFb2:g>5?#0080FF99:g>4?#0080FF7f:g>3?#0080FF66:g>2?#0080FF4c:g>1?#0080FF33:#00C0FF19
cPink(g) => g>9?#FF0080ff:g>8?#FF0080e5:g>7?#FF0080cc:g>6?#FF0080b2:g>5?#FF008099:g>4?#FF00807f:g>3?#FF008066:g>2?#FF00804c:g>1?#FF008033:#FF008019

//-------------------- Logic

periodStart = timestamp(startYear, startMonth, startDay, 0, 0)
periodStop  = timestamp(stopYear,  stopMonth,  stopDay, 0, 0)

// 3 pairs of predictor indicators, long and short each
rs = rsi(close, slow), rf = rsi(close, fast)
cs = cci(close, slow), cf = cci(close, fast)
os = roc(close, slow), of = roc(close, fast)
// TOADD or TOTRYOUT:
//    cmo(close, slow), cmo(close, fast)
//    mfi(close, slow), mfi(close, fast)
//    mom(close, slow), mom(close, fast)
f1 = ind=='RSI' ? rs : ind=='ROC' ? os : ind=='CCI' ? cs : avg(rs, os, cs)
f2 = ind=='RSI' ? rf : ind=='ROC' ? of : ind=='CCI' ? cf : avg(rf, of, cf)

// Classification data, what happens on the next bar
class = close[1]<close[0] ? SELL: close[1]>close[0] ? BUY : HOLD

// Training data, normalized to the range of [0,...,100]
var feature1   = array.new_float(0)  // [0,...,100]
var feature2   = array.new_float(0)  //    ...
var directions = array.new_int(0)    // [-1; +1]

// Result data
var predictions     = array.new_int(0)
var prediction      = 0.

var startLongTrade  = false 
var startShortTrade = false
var endLongTrade    = false  
var endShortTrade   = false  

var signal          = HOLD

// Use particular training period
if time >= periodStart and time <= periodStop
    // Store everything in arrays. Features represent a square 100 x 100 matrix,
    // whose row-colum intersections represent class labels, showing historic directions
    array.push(feature1, f1)
    array.push(feature2, f2)
    array.push(directions, class)

// Ucomment the followng statement (if barstate.islast) and tab everything below
// between BOBlock and EOBlock marks to see just the recent several signals gradually 
// showing up, rather than all the preceding signals

//if barstate.islast   

//==BOBlock	

// Core logic of the algorithm
size   = array.size(directions)
maxdist = -999.
// Loop through the training arrays, getting distances and corresponding directions.
for i=0 to size-1
    // Calculate the euclidean distance of current point to all historic points,
    // here the metric used might as well be a manhattan distance or any other.
    d = sqrt(pow(f1 - array.get(feature1, i), 2) + pow(f2 - array.get(feature2, i), 2))
    
    if d > maxdist
        maxdist := d
        if array.size(predictions) >= k
            array.shift(predictions)
        array.push(predictions, array.get(directions, i))
        
//==EOBlock	

// Note: in this setup there's no need for distances array (i.e. array.push(distances, d)),
//       but the drawback is that a sudden max value may shadow all the subsequent values.
// One of the ways to bypass this is to:
// 1) store d in distances array,
// 2) calculate newdirs = bubbleSort(distances, directions), and then 
// 3) take a slice with array.slice(newdirs) from the end
    	
// Get the overall prediction of k nearest neighbours
prediction := array.sum(predictions)   
    
// Now that we got a prediction for the next market move, we need to make use of this prediction and 
// trade it. The returns then will show if everything works as predicted.
// Over here is a simple long/short interpretation of the prediction, 
// but of course one could also use the quality of the prediction (+5 or +1) in some sort of way,
// ex. for position sizing.
    
signal := prediction > 0 ? BUY : prediction < 0 ? SELL : nz(signal[1])  // HOLD

changed = change(signal)

filter           = fltr ? atr(13) > atr(40) : true 
startLongTrade  := changed and signal==BUY  and filter // filter out by high volatility, 
startShortTrade := changed and signal==SELL and filter // or ex. atr(1) > atr(10)...
endLongTrade    := changed and signal==SELL //TOADD: stop by trade duration
endShortTrade   := changed and signal==BUY  

//-------------------- Rendering

plotshape(startLongTrade  ? low  : na, location=location.belowbar, style=shape.labelup,   color=cAqua(prediction*5),  size=size.small, title='Buy')  // color intensity correction
plotshape(startShortTrade ? high : na, location=location.abovebar, style=shape.labeldown, color=cPink(-prediction*5), size=size.small, title='Sell')
plot(endLongTrade         ? high : na, style=plot.style_cross, color=cAqua(6), linewidth=3, title='StopBuy')
plot(endShortTrade        ? low  : na, style=plot.style_cross, color=cPink(6), linewidth=3, title='StopSell')

//-------------------- Alerting


if startLongTrade
    strategy.entry("My Long Entry Id", strategy.long)
if startShortTrade
    strategy.entry("My Short Entry Id", strategy.short)
if endLongTrade
    strategy.close("My Long Entry Id")
if endShortTrade
    strategy.close("My Short Entry Id")


alertcondition(startLongTrade,  title='Buy',  message='Go long!')
alertcondition(startShortTrade, title='Sell', message='Go short!') 
//alertcondition(startLongTrade or startShortTrade, title='Alert', message='Deal Time!')

//-------------------- Backtesting (TODO)

show_cumtr = input(false, 'Show Trade Return?')
lot_size   = input(100.0, 'Lot Size', options=[0.1,0.2,0.3,0.5,1,2,3,5,10,20,30,50,100,1000,2000,3000,5000,10000]) 

var start_lt     = 0.  
var long_trades  = 0.
var start_st     = 0.  
var short_trades = 0.

if startLongTrade 
    start_lt := ohlc4 
if endLongTrade
    long_trades := (open - start_lt) * lot_size  
if startShortTrade 
    start_st := ohlc4 
if endShortTrade
    short_trades := (start_st - open) * lot_size 
    
cumreturn = cum(long_trades) + cum(short_trades) 
    
var label lbl = na
if show_cumtr //and barstate.islast  
    lbl := label.new(bar_index, close, 'CumReturn: ' + tostring(cumreturn, '#.#'), xloc.bar_index, yloc.price, 
                     color.new(color.blue, 100), label.style_label_left, color.black, size.small, text.align_left)
    label.delete(lbl[1])
